services:
  account:
    build:
      context: .
      dockerfile: account/app.dockerfile
    ports:
      - "8081:8081" # Main service port
      - "8082:8082" # Health check and metrics port
    environment:
      - DATABASE_URL=postgres://postgres:password@account_db:5432/account?sslmode=disable
    depends_on:
      account_db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8082/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure

  catalog:
    build:
      context: .
      dockerfile: catalog/app.dockerfile
    ports:
      - "8083:8083" # Main service port
      - "8084:8084" # Health check and metrics port
    environment:
      - DATABASE_URL=http://catalog_db:9200
    depends_on:
      catalog_db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8084/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure

  order:
    build:
      context: .
      dockerfile: order/app.dockerfile
    ports:
      - "8085:8085" # Main service port
      - "8086:8086" # Health check and metrics port
    environment:
      - DATABASE_URL=postgres://postgres:password@order_db:5432/order?sslmode=disable
      - ACCOUNT_SERVICE_URL=account:8081
      - CATALOG_SERVICE_URL=catalog:8083
    depends_on:
      order_db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8086/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure

  graphql:
    build:
      context: .
      dockerfile: graphql/app.dockerfile
    ports:
      - "8087:8087" # Main GraphQL service port
      - "8088:8088" # Health check and metrics port
    environment:
      - ACCOUNT_SERVICE_URL=account:8081
      - CATALOG_SERVICE_URL=catalog:8083
      - ORDER_SERVICE_URL=order:8085
    depends_on:
      account:
        condition: service_healthy
      catalog:
        condition: service_healthy
      order:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8088/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure

  account_db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=account
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - account_data:/var/lib/postgresql/data
      - ./account/up.sql:/docker-entrypoint-initdb.d/up.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  catalog_db:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - catalog_data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  order_db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=order
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - order_data:/var/lib/postgresql/data
      - ./order/up.sql:/docker-entrypoint-initdb.d/up.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ### CHANGE THIS #### - Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # ### CHANGE THIS #### - Grafana visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  account_data:
  catalog_data:
  order_data:
  prometheus_data:
  grafana_data:
